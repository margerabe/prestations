pro.save
exit
exi
@matched_pros.pluck(:name)
@matched_pros
exit
@matched_pros.pluck(:name)
exit
@matched_pros.pluck(:name)
@matched_pros
exit
@matched_pros.pluck(:name)
exit
        check = (booking_start_time(@booking).strftime("%H:%M") > pro_day_hours.start_time) && (booking_end_time(@booking,
                                                                                                                 prestation).strftime("%H:%M") < pro_day_hours.end_time)
pro_day_hours
exit
pro_day_hours = pro.opening_hours.where(day: @booking_day)
prestation
exit
c
@matched_pros.pluck(:name)
c
@matched_pros.pluck(:name)
c
exit
@booking_day
@matched_pros.pluck(:name)
c
@matched_pros.pluck(:name)
c
@matched_pros.pluck(:name)
@matched_pros
exit
@matched_pros.count
@matched_pros
exit
@matched_pros.pluck(:name)
c
@matched_pros.pluck(:name)
c
@matched_pros.pluck(:name)
exit
@matched_pros.first.opening_hours.pluck(:day)
@matched_pros.count
@matched_pros
exit
pro1.opening_hours
exit
pro1.opening_hours
opening_hour1
pro1.opening_hours
exit
@matched_pros.count
@matched_pros
exit
Geocoder::Calculations.distance_between(pro, @booking)
exit
@booking.lng
@booking.lat
Geocoder::Calculations.distance_between(pro, @booking)
@booking.address
pro.address
      distance = Geocoder::Calculations.distance_between(pro, @booking)
exit
@matched_pros.count
c
@matched_pros.count
exit
@matched_pros.count
exit
@matched_pros.count
@matched_pros
exit
pro1.prestations.pluck(:reference)
pro1.prestations
pro1
exit
@matched_pros.count
exit
ProPrestation.destroy_all
ProPrestation.count
